image: python:latest

cache:
    paths:
        - ~/.cache/pip/

before_script:
    - python -V
    - apt-get update
    - apt-get install ssh-client
    - mkdir public

stages:
    - deploy
    - style
    - docs
    - test

upload_to_server:
    stage: deploy
    before_script:
        - apt-get install -qq git
        - 'which ssh-agent || ( apt-get install -qq openssh-client )'
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$SSH_PRIVATE_KEY")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    script:
        - ssh $SSH_USER@$SSH_HOST "cd prodserver_conf/s104_juk && git checkout master && git pull origin master && exit"
        - ssh $SSH_USER@$SSH_HOST "cd prodserver_conf && docker stop s104_juk && docker rm s104_juk && docker-compose build s104_juk && docker-compose up -d s104_juk && exit"
    only:
        - master

pylint:
    stage: style
    before_script:
        - pip install -r ci/pylint_requirements.txt
    script:
        - ./ci/pylint_runner.sh
    artifacts:
        paths:
            - public/pylint.txt

pep8:
    stage: style
    before_script:
        - pip install -r ci/pycodestyle_requirements.txt
    script:
        - ./ci/pycodestyle_runner.sh
    artifacts:
        paths:
            - public/pycodestyle.txt

sphinx:
  stage: docs
  before_script:
    - pip install -r ci/sphinx_requirements.txt
  script:
    - ./ci/sphinx_runner.sh
  artifacts:
    paths:
      - public/docs

test:
    stage: test
    before_script:
        - pip install -r requirements.txt
        - pip install coverage
    script:
        - ./ci/test_runner.sh
    artifacts:
        paths:
            - public/test.txt
            - public/code_coverage.txt
